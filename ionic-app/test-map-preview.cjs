#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'int√©gration de la Map Preview
 * avec les vraies coordonn√©es GPS
 */

const axios = require('axios');

const API_URL = process.env.VITE_API_URL || 'http://localhost:5000/api';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
};

async function testMapPreviewData() {
  console.log('\n' + '='.repeat(60));
  console.log(`${colors.cyan}üó∫Ô∏è  TEST MAP PREVIEW - COORDONN√âES GPS${colors.reset}`);
  console.log('='.repeat(60) + '\n');

  try {
    // R√©cup√©rer toutes les attractions
    const response = await axios.get(`${API_URL}/attractions`);
    
    if (!response.data.success || !response.data.data?.attractions) {
      console.log(`${colors.red}‚ùå Erreur: Impossible de r√©cup√©rer les attractions${colors.reset}`);
      return false;
    }

    const attractions = response.data.data.attractions;
    console.log(`${colors.green}‚úÖ ${attractions.length} attractions r√©cup√©r√©es${colors.reset}\n`);

    let successCount = 0;
    let errorCount = 0;

    attractions.forEach((attraction, index) => {
      console.log(`${colors.yellow}${index + 1}. ${attraction.name}${colors.reset}`);
      
      // V√©rifier la pr√©sence de location
      if (!attraction.location) {
        console.log(`   ${colors.red}‚ùå Pas de location${colors.reset}`);
        errorCount++;
        return;
      }

      // V√©rifier le type GeoJSON
      if (attraction.location.type !== 'Point') {
        console.log(`   ${colors.red}‚ùå Type invalide: ${attraction.location.type}${colors.reset}`);
        errorCount++;
        return;
      }

      // V√©rifier les coordonn√©es
      if (!attraction.location.coordinates || attraction.location.coordinates.length !== 2) {
        console.log(`   ${colors.red}‚ùå Coordonn√©es invalides${colors.reset}`);
        errorCount++;
        return;
      }

      const [lng, lat] = attraction.location.coordinates;

      // Valider longitude (-180 √† 180)
      if (typeof lng !== 'number' || lng < -180 || lng > 180) {
        console.log(`   ${colors.red}‚ùå Longitude invalide: ${lng}${colors.reset}`);
        errorCount++;
        return;
      }

      // Valider latitude (-90 √† 90)
      if (typeof lat !== 'number' || lat < -90 || lat > 90) {
        console.log(`   ${colors.red}‚ùå Latitude invalide: ${lat}${colors.reset}`);
        errorCount++;
        return;
      }

      // V√©rifier que c'est en C√¥te d'Ivoire (approximativement)
      // CI: longitude -8.6 √† -2.5, latitude 4.3 √† 10.7
      const isInCI = (lng >= -8.6 && lng <= -2.5) && (lat >= 4.3 && lat <= 10.7);
      
      if (!isInCI) {
        console.log(`   ${colors.yellow}‚ö†Ô∏è  Coordonn√©es hors C√¥te d'Ivoire: [${lng}, ${lat}]${colors.reset}`);
      }

      console.log(`   ${colors.green}‚úÖ GPS valide: [${lng.toFixed(4)}, ${lat.toFixed(4)}]${colors.reset}`);
      console.log(`   üìç ${attraction.city}, ${attraction.region}`);
      console.log(`   üó∫Ô∏è  Mapbox URL: https://api.mapbox.com/styles/v1/mapbox/streets-v12/static/${lng},${lat},14,0/400x300@2x`);
      console.log('');
      
      successCount++;
    });

    console.log('='.repeat(60));
    console.log('üìä R√âSULTATS');
    console.log('='.repeat(60));
    console.log(`${colors.green}‚úÖ Valides: ${successCount}${colors.reset}`);
    console.log(`${colors.red}‚ùå Erreurs: ${errorCount}${colors.reset}`);
    console.log(`üìà Score: ${successCount}/${attractions.length} (${Math.round(successCount/attractions.length*100)}%)`);
    console.log('='.repeat(60) + '\n');

    // Test des audioguides avec gpsLocation
    console.log(`${colors.cyan}üéß V√âRIFICATION AUDIOGUIDES GPS${colors.reset}\n`);
    
    const audioResponse = await axios.get(`${API_URL}/audio-guides`);
    const audioGuides = audioResponse.data.data;

    let audioSuccess = 0;
    let audioError = 0;

    audioGuides.forEach((ag, index) => {
      if (ag.gpsLocation?.coordinates && ag.gpsLocation.coordinates.length === 2) {
        const [lng, lat] = ag.gpsLocation.coordinates;
        console.log(`${colors.green}‚úÖ ${index + 1}. ${ag.title}: [${lng.toFixed(4)}, ${lat.toFixed(4)}]${colors.reset}`);
        audioSuccess++;
      } else {
        console.log(`${colors.red}‚ùå ${index + 1}. ${ag.title}: GPS manquant${colors.reset}`);
        audioError++;
      }
    });

    console.log(`\n${colors.cyan}üìä AudioGuides: ${audioSuccess}/${audioGuides.length} avec GPS${colors.reset}\n`);

    return successCount === attractions.length && audioSuccess === audioGuides.length;
  } catch (error) {
    console.log(`${colors.red}‚ùå Erreur: ${error.message}${colors.reset}`);
    return false;
  }
}

async function testMapboxIntegration() {
  console.log(`${colors.cyan}üåç TEST INT√âGRATION MAPBOX GL JS${colors.reset}\n`);

  const checks = [
    {
      name: 'Token Mapbox configur√©',
      check: () => process.env.VITE_MAPBOX_TOKEN?.length > 0,
      fix: 'Ajouter VITE_MAPBOX_TOKEN dans .env'
    },
    {
      name: 'Mapbox GL JS install√©',
      check: () => {
        try {
          require.resolve('mapbox-gl');
          return true;
        } catch {
          return false;
        }
      },
      fix: 'npm install mapbox-gl'
    }
  ];

  let allPassed = true;

  checks.forEach(({ name, check, fix }) => {
    const passed = check();
    if (passed) {
      console.log(`${colors.green}‚úÖ ${name}${colors.reset}`);
    } else {
      console.log(`${colors.red}‚ùå ${name}${colors.reset}`);
      console.log(`   üí° Solution: ${fix}`);
      allPassed = false;
    }
  });

  return allPassed;
}

async function main() {
  console.log('\n' + '‚ïê'.repeat(60));
  console.log(`${colors.cyan}   üó∫Ô∏è  TEST INT√âGRATION MAP PREVIEW   ${colors.reset}`);
  console.log('‚ïê'.repeat(60));

  const mapboxOk = await testMapboxIntegration();
  const dataOk = await testMapPreviewData();

  console.log('\n' + '‚ïê'.repeat(60));
  console.log('üéØ R√âSULTAT FINAL');
  console.log('‚ïê'.repeat(60));

  if (mapboxOk && dataOk) {
    console.log(`${colors.green}‚úÖ Map Preview compl√®tement fonctionnelle !${colors.reset}`);
    console.log(`${colors.green}‚úÖ Toutes les attractions ont des coordonn√©es GPS valides${colors.reset}`);
    console.log(`${colors.green}‚úÖ Tous les audioguides ont gpsLocation${colors.reset}`);
    console.log('\nüí° La Map Preview s\'affichera dans AttractionDetail.tsx');
    console.log('‚ïê'.repeat(60) + '\n');
    process.exit(0);
  } else {
    console.log(`${colors.red}‚ùå Des probl√®mes ont √©t√© d√©tect√©s${colors.reset}`);
    console.log('‚ïê'.repeat(60) + '\n');
    process.exit(1);
  }
}

main();
