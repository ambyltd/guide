#!/usr/bin/env node

/**
 * Script de test pour l'am√©lioration du debugging Firebase Auth
 * Teste les nouvelles fonctionnalit√©s d'erreur et de diagnostic
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Test des am√©liorations de debugging Firebase Auth\n');

// 1. V√©rifier que les fichiers ont √©t√© cr√©√©s/modifi√©s
const filesToCheck = [
  'src/services/authService.ts',
  'src/pages/FirebaseDiagnosticPage.tsx',
  'src/pages/LoginPage.tsx',
  'src/pages/LoginPage.css',
  'src/App.tsx'
];

console.log('üìÅ V√©rification des fichiers...');
let allFilesExist = true;

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Existe`);
  } else {
    console.log(`‚ùå ${file} - Manquant`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå Certains fichiers sont manquants.');
  process.exit(1);
}

// 2. V√©rifier le contenu de authService.ts
console.log('\nüîß V√©rification des am√©liorations dans authService.ts...');
const authServicePath = path.join(__dirname, 'src/services/authService.ts');
const authServiceContent = fs.readFileSync(authServicePath, 'utf8');

const authServiceChecks = [
  { pattern: /auth\/invalid-credential/, description: 'Message d\'erreur sp√©cifique pour invalid-credential' },
  { pattern: /Firebase Config Check/, description: 'Debug logging pour la configuration' },
  { pattern: /Tentative de connexion/, description: 'Debug logging pour les tentatives de connexion' },
  { pattern: /Erreur de connexion d√©taill√©e/, description: 'Logging d\'erreur am√©lior√©' }
];

authServiceChecks.forEach(check => {
  if (check.pattern.test(authServiceContent)) {
    console.log(`‚úÖ ${check.description}`);
  } else {
    console.log(`‚ùå ${check.description}`);
  }
});

// 3. V√©rifier la page de diagnostic
console.log('\nüîç V√©rification de FirebaseDiagnosticPage.tsx...');
const diagnosticPagePath = path.join(__dirname, 'src/pages/FirebaseDiagnosticPage.tsx');
const diagnosticPageContent = fs.readFileSync(diagnosticPagePath, 'utf8');

const diagnosticChecks = [
  { pattern: /Variables.*environnement.*Firebase/, description: 'Test des variables d\'environnement' },
  { pattern: /Initialisation Firebase Auth/, description: 'Test d\'initialisation Firebase Auth' },
  { pattern: /Connectivit√© Firebase API/, description: 'Test de connectivit√© API' },
  { pattern: /runDiagnostics/, description: 'Fonction de diagnostic' }
];

diagnosticChecks.forEach(check => {
  if (check.pattern.test(diagnosticPageContent)) {
    console.log(`‚úÖ ${check.description}`);
  } else {
    console.log(`‚ùå ${check.description}`);
  }
});

// 4. V√©rifier l'int√©gration dans App.tsx
console.log('\nüöÄ V√©rification de l\'int√©gration dans App.tsx...');
const appPath = path.join(__dirname, 'src/App.tsx');
const appContent = fs.readFileSync(appPath, 'utf8');

const appChecks = [
  { pattern: /import.*FirebaseDiagnosticPage/, description: 'Import de FirebaseDiagnosticPage' },
  { pattern: /path="\/diagnostic"/, description: 'Route pour /diagnostic' },
  { pattern: /<FirebaseDiagnosticPage/, description: 'Composant utilis√© dans une route' }
];

appChecks.forEach(check => {
  if (check.pattern.test(appContent)) {
    console.log(`‚úÖ ${check.description}`);
  } else {
    console.log(`‚ùå ${check.description}`);
  }
});

// 5. V√©rifier le lien de diagnostic dans LoginPage
console.log('\nüîó V√©rification du lien de diagnostic dans LoginPage.tsx...');
const loginPagePath = path.join(__dirname, 'src/pages/LoginPage.tsx');
const loginPageContent = fs.readFileSync(loginPagePath, 'utf8');

const loginPageChecks = [
  { pattern: /bugOutline/, description: 'Import de l\'ic√¥ne bugOutline' },
  { pattern: /routerLink="\/diagnostic"/, description: 'Lien vers la page de diagnostic' },
  { pattern: /Probl√®me de connexion/, description: 'Texte d\'aide pour le diagnostic' },
  { pattern: /diagnostic-link/, description: 'Classe CSS pour le lien de diagnostic' }
];

loginPageChecks.forEach(check => {
  if (check.pattern.test(loginPageContent)) {
    console.log(`‚úÖ ${check.description}`);
  } else {
    console.log(`‚ùå ${check.description}`);
  }
});

// 6. V√©rifier les styles CSS
console.log('\nüé® V√©rification des styles CSS...');
const cssPath = path.join(__dirname, 'src/pages/LoginPage.css');
const cssContent = fs.readFileSync(cssPath, 'utf8');

const cssChecks = [
  { pattern: /\.diagnostic-link/, description: 'Style pour diagnostic-link' },
  { pattern: /\.diagnostic-button/, description: 'Style pour diagnostic-button' }
];

cssChecks.forEach(check => {
  if (check.pattern.test(cssContent)) {
    console.log(`‚úÖ ${check.description}`);
  } else {
    console.log(`‚ùå ${check.description}`);
  }
});

console.log('\n‚ú® Test des am√©liorations termin√© !\n');

console.log('üìã R√©sum√© des am√©liorations :');
console.log('1. ‚úÖ Messages d\'erreur plus sp√©cifiques dans authService.ts');
console.log('2. ‚úÖ Debug logging pour le diagnostic des probl√®mes');
console.log('3. ‚úÖ Page de diagnostic Firebase compl√®te (/diagnostic)');
console.log('4. ‚úÖ Lien de diagnostic accessible depuis la page de connexion');
console.log('5. ‚úÖ Tests automatis√©s de configuration Firebase');
console.log('6. ‚úÖ Interface utilisateur pour le debugging');

console.log('\nüöÄ Prochaines √©tapes recommand√©es :');
console.log('1. D√©marrer l\'application : npm start');
console.log('2. Aller sur http://localhost:3000/diagnostic pour tester');
console.log('3. Essayer de se connecter et examiner les logs de la console');
console.log('4. Utiliser les informations de diagnostic pour r√©soudre les probl√®mes');

console.log('\nüí° Pour d√©boguer une erreur de connexion :');
console.log('- Ouvrir les DevTools (F12)');
console.log('- Aller dans la console');
console.log('- Essayer de se connecter');
console.log('- Examiner les logs "Firebase Auth Config" et "Sign-in attempt"');
console.log('- Utiliser la page /diagnostic pour des tests automatis√©s');