/**
 * Script de validation des routes - V√©rifie que toutes les routes utilisent /tabs
 * Validations:
 * 1. Toutes les routes de navigation doivent commencer par /tabs/
 * 2. Les routes d'authentification (/login, /register, etc.) sont exclues
 * 3. V√©rifie la coh√©rence entre App.tsx et les pages
 */

const fs = require('fs');
const path = require('path');

console.log('\nüß™ VALIDATION DES ROUTES DE NAVIGATION\n');
console.log('='.repeat(60));

let totalIssues = 0;
let totalChecks = 0;

// Fichiers √† v√©rifier
const filesToCheck = [
  'src/pages/Home.tsx',
  'src/pages/Map.tsx',
  'src/pages/Favorites.tsx',
  'src/pages/AttractionDetail.tsx',
  'src/pages/Profile.tsx'
];

// Routes autoris√©es sans /tabs (authentification)
const allowedWithoutTabs = [
  '/login',
  '/register',
  '/forgot-password',
  '/reset-password'
];

// Patterns de routes √† v√©rifier
const routePatterns = [
  { regex: /history\.push\([`'"]\/(?!tabs\/|login|register|forgot-password|reset-password)([^`'"]*)[`'"]\)/g, description: 'Routes sans /tabs/' },
  { regex: /href=[`'"]\/(?!tabs\/|login|register|forgot-password|reset-password)([^`'"]*)[`'"]/g, description: 'href sans /tabs/' },
];

console.log('\nüìÇ Fichiers √† v√©rifier:\n');
filesToCheck.forEach((file, i) => {
  console.log(`   ${i + 1}. ${file}`);
});

console.log('\n' + '-'.repeat(60));

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, file);
  
  if (!fs.existsSync(filePath)) {
    console.log(`\n‚ö†Ô∏è  ${file}: fichier non trouv√©`);
    return;
  }

  const content = fs.readFileSync(filePath, 'utf-8');
  let fileIssues = 0;

  console.log(`\nüìÑ ${file}`);
  
  routePatterns.forEach(pattern => {
    const matches = [...content.matchAll(pattern.regex)];
    
    if (matches.length > 0) {
      console.log(`\n   ‚ùå ${pattern.description}:`);
      matches.forEach(match => {
        const lineNumber = content.substring(0, match.index).split('\n').length;
        console.log(`      - Ligne ${lineNumber}: ${match[0]}`);
        fileIssues++;
        totalIssues++;
      });
    }
    totalChecks++;
  });

  if (fileIssues === 0) {
    console.log('   ‚úÖ Aucun probl√®me d√©tect√©');
  }
});

// V√©rifier App.tsx pour la coh√©rence des routes
console.log('\n' + '='.repeat(60));
console.log('\nüìã V√©rification de App.tsx\n');

const appTsxPath = path.join(__dirname, 'src/App.tsx');
if (fs.existsSync(appTsxPath)) {
  const appContent = fs.readFileSync(appTsxPath, 'utf-8');
  
  // Extraire les routes d√©finies
  const routeRegex = /<Route\s+(?:exact\s+)?path=["']([^"']+)["']/g;
  const routes = [...appContent.matchAll(routeRegex)].map(m => m[1]);
  
  console.log('Routes d√©finies dans App.tsx:');
  routes.forEach((route, i) => {
    if (route.startsWith('/tabs/')) {
      console.log(`   ${i + 1}. ${route} ‚úÖ`);
    } else if (allowedWithoutTabs.includes(route) || route === '/') {
      console.log(`   ${i + 1}. ${route} ‚ö™ (auth/redirect)`);
    } else {
      console.log(`   ${i + 1}. ${route} ‚ö†Ô∏è  (hors /tabs)`);
    }
  });

  // V√©rifier la pr√©sence de IonTabs
  if (appContent.includes('<IonTabs>')) {
    console.log('\n‚úÖ IonTabs pr√©sent dans App.tsx');
  } else {
    console.log('\n‚ùå IonTabs manquant dans App.tsx');
    totalIssues++;
  }

  // V√©rifier la pr√©sence de IonTabBar
  if (appContent.includes('<IonTabBar')) {
    console.log('‚úÖ IonTabBar pr√©sent dans App.tsx');
  } else {
    console.log('‚ùå IonTabBar manquant dans App.tsx');
    totalIssues++;
  }
} else {
  console.log('‚ùå App.tsx non trouv√©');
  totalIssues++;
}

// R√©sum√©
console.log('\n' + '='.repeat(60));
console.log('\nüìä R√âSUM√â DE LA VALIDATION\n');

if (totalIssues === 0) {
  console.log('‚úÖ TOUTES LES ROUTES SONT CORRECTES !');
  console.log('üéâ Toutes les routes de navigation utilisent /tabs/');
  console.log('‚ú® L\'application respecte la structure de navigation Ionic\n');
} else {
  console.log(`‚ùå ${totalIssues} probl√®me(s) d√©tect√©(s)`);
  console.log(`üìù ${totalChecks} v√©rifications effectu√©es\n`);
  console.log('üí° Actions recommand√©es:');
  console.log('   1. Corriger toutes les routes sans /tabs/');
  console.log('   2. V√©rifier que App.tsx utilise <IonTabs>');
  console.log('   3. Re-tester l\'application apr√®s corrections\n');
}

console.log('='.repeat(60) + '\n');

process.exit(totalIssues > 0 ? 1 : 0);
