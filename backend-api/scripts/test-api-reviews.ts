import axios from 'axios';

const API_BASE = 'http://localhost:3001/api';

async function testReviewsAPI() {
  try {
    console.log('üîç Test de l\'API Reviews...\n');

    // Test 1: V√©rifier que le serveur est accessible
    console.log('1. Test de sant√© de l\'API...');
    try {
      const healthResponse = await axios.get(`${API_BASE}/health`);
      console.log('‚úÖ Serveur accessible:', healthResponse.data);
    } catch (error) {
      console.log('‚ùå Serveur non accessible');
      return;
    }

    // Test 2: R√©cup√©rer toutes les reviews (sans auth - devrait √©chouer)
    console.log('\n2. Test r√©cup√©ration reviews sans auth...');
    try {
      const response = await axios.get(`${API_BASE}/reviews`);
      console.log('‚ùå Erreur: Les reviews devraient n√©cessiter une authentification');
    } catch (error: any) {
      if (error.response?.status === 401) {
        console.log('‚úÖ S√©curit√© OK: Authentication requise');
      } else {
        console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
      }
    }

    // Test 3: R√©cup√©rer les reviews d'une attraction sp√©cifique (publique)
    console.log('\n3. Test r√©cup√©ration reviews d\'une attraction...');
    try {
      // On utilise un ID fictif pour tester la route
      const response = await axios.get(`${API_BASE}/reviews/item/507f1f77bcf86cd799439011`);
      console.log('‚úÖ Route accessible:', response.status);
      console.log('   Donn√©es re√ßues:', response.data);
    } catch (error: any) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Route fonctionne (404 attendu pour ID fictif)');
      } else {
        console.log('‚ö†Ô∏è Erreur:', error.response?.status, error.response?.data);
      }
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Attendre que le serveur soit pr√™t
setTimeout(testReviewsAPI, 3000);
